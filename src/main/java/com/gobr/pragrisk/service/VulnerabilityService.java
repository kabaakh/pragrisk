package com.gobr.pragrisk.service;

import static org.elasticsearch.index.query.QueryBuilders.*;

import com.gobr.pragrisk.domain.Vulnerability;
import com.gobr.pragrisk.repository.VulnerabilityRepository;
import com.gobr.pragrisk.repository.search.VulnerabilitySearchRepository;
import java.util.Optional;
import java.util.UUID;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * Service Implementation for managing {@link Vulnerability}.
 */
@Service
@Transactional
public class VulnerabilityService {

    private final Logger log = LoggerFactory.getLogger(VulnerabilityService.class);

    private final VulnerabilityRepository vulnerabilityRepository;

    private final VulnerabilitySearchRepository vulnerabilitySearchRepository;

    public VulnerabilityService(
        VulnerabilityRepository vulnerabilityRepository,
        VulnerabilitySearchRepository vulnerabilitySearchRepository
    ) {
        this.vulnerabilityRepository = vulnerabilityRepository;
        this.vulnerabilitySearchRepository = vulnerabilitySearchRepository;
    }

    /**
     * Save a vulnerability.
     *
     * @param vulnerability the entity to save.
     * @return the persisted entity.
     */
    public Vulnerability save(Vulnerability vulnerability) {
        log.debug("Request to save Vulnerability : {}", vulnerability);
        Vulnerability result = vulnerabilityRepository.save(vulnerability);
        vulnerabilitySearchRepository.save(result);
        return result;
    }

    /**
     * Partially update a vulnerability.
     *
     * @param vulnerability the entity to update partially.
     * @return the persisted entity.
     */
    public Optional<Vulnerability> partialUpdate(Vulnerability vulnerability) {
        log.debug("Request to partially update Vulnerability : {}", vulnerability);

        return vulnerabilityRepository
            .findById(vulnerability.getVulnerabilityID())
            .map(existingVulnerability -> {
                if (vulnerability.getName() != null) {
                    existingVulnerability.setName(vulnerability.getName());
                }
                if (vulnerability.getCweReference() != null) {
                    existingVulnerability.setCweReference(vulnerability.getCweReference());
                }
                if (vulnerability.getCvss() != null) {
                    existingVulnerability.setCvss(vulnerability.getCvss());
                }

                return existingVulnerability;
            })
            .map(vulnerabilityRepository::save)
            .map(savedVulnerability -> {
                vulnerabilitySearchRepository.save(savedVulnerability);

                return savedVulnerability;
            });
    }

    /**
     * Get all the vulnerabilities.
     *
     * @param pageable the pagination information.
     * @return the list of entities.
     */
    @Transactional(readOnly = true)
    public Page<Vulnerability> findAll(Pageable pageable) {
        log.debug("Request to get all Vulnerabilities");
        return vulnerabilityRepository.findAll(pageable);
    }

    /**
     * Get all the vulnerabilities with eager load of many-to-many relationships.
     *
     * @return the list of entities.
     */
    public Page<Vulnerability> findAllWithEagerRelationships(Pageable pageable) {
        return vulnerabilityRepository.findAllWithEagerRelationships(pageable);
    }

    /**
     * Get one vulnerability by id.
     *
     * @param id the id of the entity.
     * @return the entity.
     */
    @Transactional(readOnly = true)
    public Optional<Vulnerability> findOne(UUID id) {
        log.debug("Request to get Vulnerability : {}", id);
        return vulnerabilityRepository.findOneWithEagerRelationships(id);
    }

    /**
     * Delete the vulnerability by id.
     *
     * @param id the id of the entity.
     */
    public void delete(UUID id) {
        log.debug("Request to delete Vulnerability : {}", id);
        vulnerabilityRepository.deleteById(id);
        vulnerabilitySearchRepository.deleteById(id);
    }

    /**
     * Search for the vulnerability corresponding to the query.
     *
     * @param query the query of the search.
     * @param pageable the pagination information.
     * @return the list of entities.
     */
    @Transactional(readOnly = true)
    public Page<Vulnerability> search(String query, Pageable pageable) {
        log.debug("Request to search for a page of Vulnerabilities for query {}", query);
        return vulnerabilitySearchRepository.search(query, pageable);
    }
}
