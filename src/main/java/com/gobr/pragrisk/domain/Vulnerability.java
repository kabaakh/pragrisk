package com.gobr.pragrisk.domain;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;
import javax.persistence.*;
import javax.validation.constraints.*;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

/**
 * A Vulnerability.
 */
@Entity
@Table(name = "vulnerability")
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
@org.springframework.data.elasticsearch.annotations.Document(indexName = "vulnerability")
public class Vulnerability implements Serializable {

    private static final long serialVersionUID = 1L;

    @NotNull
    @Id
    @GeneratedValue
    @Column(name = "vulnerability_id", nullable = false, unique = true)
    private UUID vulnerabilityID;

    @NotNull
    @Column(name = "name", nullable = false)
    private String name;

    @Column(name = "cwe_reference")
    private String cweReference;

    @Column(name = "cvss")
    private String cvss;

    @OneToMany(mappedBy = "vulnerabilityFK")
    @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
    @JsonIgnoreProperties(value = { "actorFK", "technologyFK", "vulnerabilityFK" }, allowSetters = true)
    private Set<Scenario> vulnerabilityIDS = new HashSet<>();

    @ManyToMany
    @JoinTable(
        name = "rel_vulnerability__mitigation",
        joinColumns = @JoinColumn(name = "vulnerability_vulnerability_id"),
        inverseJoinColumns = @JoinColumn(name = "mitigation_mitigation_id")
    )
    @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
    @JsonIgnoreProperties(value = { "vulnerabilities" }, allowSetters = true)
    private Set<Mitigation> mitigations = new HashSet<>();

    // jhipster-needle-entity-add-field - JHipster will add fields here

    public UUID getVulnerabilityID() {
        return this.vulnerabilityID;
    }

    public Vulnerability vulnerabilityID(UUID vulnerabilityID) {
        this.setVulnerabilityID(vulnerabilityID);
        return this;
    }

    public void setVulnerabilityID(UUID vulnerabilityID) {
        this.vulnerabilityID = vulnerabilityID;
    }

    public String getName() {
        return this.name;
    }

    public Vulnerability name(String name) {
        this.setName(name);
        return this;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getCweReference() {
        return this.cweReference;
    }

    public Vulnerability cweReference(String cweReference) {
        this.setCweReference(cweReference);
        return this;
    }

    public void setCweReference(String cweReference) {
        this.cweReference = cweReference;
    }

    public String getCvss() {
        return this.cvss;
    }

    public Vulnerability cvss(String cvss) {
        this.setCvss(cvss);
        return this;
    }

    public void setCvss(String cvss) {
        this.cvss = cvss;
    }

    public Set<Scenario> getVulnerabilityIDS() {
        return this.vulnerabilityIDS;
    }

    public void setVulnerabilityIDS(Set<Scenario> scenarios) {
        if (this.vulnerabilityIDS != null) {
            this.vulnerabilityIDS.forEach(i -> i.setVulnerabilityFK(null));
        }
        if (scenarios != null) {
            scenarios.forEach(i -> i.setVulnerabilityFK(this));
        }
        this.vulnerabilityIDS = scenarios;
    }

    public Vulnerability vulnerabilityIDS(Set<Scenario> scenarios) {
        this.setVulnerabilityIDS(scenarios);
        return this;
    }

    public Vulnerability addVulnerabilityID(Scenario scenario) {
        this.vulnerabilityIDS.add(scenario);
        scenario.setVulnerabilityFK(this);
        return this;
    }

    public Vulnerability removeVulnerabilityID(Scenario scenario) {
        this.vulnerabilityIDS.remove(scenario);
        scenario.setVulnerabilityFK(null);
        return this;
    }

    public Set<Mitigation> getMitigations() {
        return this.mitigations;
    }

    public void setMitigations(Set<Mitigation> mitigations) {
        this.mitigations = mitigations;
    }

    public Vulnerability mitigations(Set<Mitigation> mitigations) {
        this.setMitigations(mitigations);
        return this;
    }

    public Vulnerability addMitigation(Mitigation mitigation) {
        this.mitigations.add(mitigation);
        mitigation.getVulnerabilities().add(this);
        return this;
    }

    public Vulnerability removeMitigation(Mitigation mitigation) {
        this.mitigations.remove(mitigation);
        mitigation.getVulnerabilities().remove(this);
        return this;
    }

    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof Vulnerability)) {
            return false;
        }
        return vulnerabilityID != null && vulnerabilityID.equals(((Vulnerability) o).vulnerabilityID);
    }

    @Override
    public int hashCode() {
        // see https://vladmihalcea.com/how-to-implement-equals-and-hashcode-using-the-jpa-entity-identifier/
        return getClass().hashCode();
    }

    // prettier-ignore
    @Override
    public String toString() {
        return "Vulnerability{" +
            "vulnerabilityID=" + getVulnerabilityID() +
            ", name='" + getName() + "'" +
            ", cweReference='" + getCweReference() + "'" +
            ", cvss='" + getCvss() + "'" +
            "}";
    }
}
