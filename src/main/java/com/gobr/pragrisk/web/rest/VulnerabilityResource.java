package com.gobr.pragrisk.web.rest;

import static org.elasticsearch.index.query.QueryBuilders.*;

import com.gobr.pragrisk.domain.Vulnerability;
import com.gobr.pragrisk.repository.VulnerabilityRepository;
import com.gobr.pragrisk.repository.search.VulnerabilitySearchRepository;
import com.gobr.pragrisk.web.rest.errors.BadRequestAlertException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.UUID;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;
import tech.jhipster.web.util.HeaderUtil;
import tech.jhipster.web.util.ResponseUtil;

/**
 * REST controller for managing {@link com.gobr.pragrisk.domain.Vulnerability}.
 */
@RestController
@RequestMapping("/api")
@Transactional
public class VulnerabilityResource {

    private final Logger log = LoggerFactory.getLogger(VulnerabilityResource.class);

    private static final String ENTITY_NAME = "vulnerability";

    @Value("${jhipster.clientApp.name}")
    private String applicationName;

    private final VulnerabilityRepository vulnerabilityRepository;

    private final VulnerabilitySearchRepository vulnerabilitySearchRepository;

    public VulnerabilityResource(
        VulnerabilityRepository vulnerabilityRepository,
        VulnerabilitySearchRepository vulnerabilitySearchRepository
    ) {
        this.vulnerabilityRepository = vulnerabilityRepository;
        this.vulnerabilitySearchRepository = vulnerabilitySearchRepository;
    }

    /**
     * {@code POST  /vulnerabilities} : Create a new vulnerability.
     *
     * @param vulnerability the vulnerability to create.
     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new vulnerability, or with status {@code 400 (Bad Request)} if the vulnerability has already an ID.
     * @throws URISyntaxException if the Location URI syntax is incorrect.
     */
    @PostMapping("/vulnerabilities")
    public ResponseEntity<Vulnerability> createVulnerability(@Valid @RequestBody Vulnerability vulnerability) throws URISyntaxException {
        log.debug("REST request to save Vulnerability : {}", vulnerability);
        if (vulnerability.getVulnerabilityID() != null) {
            throw new BadRequestAlertException("A new vulnerability cannot already have an ID", ENTITY_NAME, "idexists");
        }
        Vulnerability result = vulnerabilityRepository.save(vulnerability);
        vulnerabilitySearchRepository.save(result);
        return ResponseEntity
            .created(new URI("/api/vulnerabilities/" + result.getVulnerabilityID()))
            .headers(HeaderUtil.createEntityCreationAlert(applicationName, true, ENTITY_NAME, result.getVulnerabilityID().toString()))
            .body(result);
    }

    /**
     * {@code PUT  /vulnerabilities/:vulnerabilityID} : Updates an existing vulnerability.
     *
     * @param vulnerabilityID the id of the vulnerability to save.
     * @param vulnerability the vulnerability to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated vulnerability,
     * or with status {@code 400 (Bad Request)} if the vulnerability is not valid,
     * or with status {@code 500 (Internal Server Error)} if the vulnerability couldn't be updated.
     * @throws URISyntaxException if the Location URI syntax is incorrect.
     */
    @PutMapping("/vulnerabilities/{vulnerabilityID}")
    public ResponseEntity<Vulnerability> updateVulnerability(
        @PathVariable(value = "vulnerabilityID", required = false) final UUID vulnerabilityID,
        @Valid @RequestBody Vulnerability vulnerability
    ) throws URISyntaxException {
        log.debug("REST request to update Vulnerability : {}, {}", vulnerabilityID, vulnerability);
        if (vulnerability.getVulnerabilityID() == null) {
            throw new BadRequestAlertException("Invalid id", ENTITY_NAME, "idnull");
        }
        if (!Objects.equals(vulnerabilityID, vulnerability.getVulnerabilityID())) {
            throw new BadRequestAlertException("Invalid ID", ENTITY_NAME, "idinvalid");
        }

        if (!vulnerabilityRepository.existsById(vulnerabilityID)) {
            throw new BadRequestAlertException("Entity not found", ENTITY_NAME, "idnotfound");
        }

        Vulnerability result = vulnerabilityRepository.save(vulnerability);
        vulnerabilitySearchRepository.save(result);
        return ResponseEntity
            .ok()
            .headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, vulnerability.getVulnerabilityID().toString()))
            .body(result);
    }

    /**
     * {@code PATCH  /vulnerabilities/:vulnerabilityID} : Partial updates given fields of an existing vulnerability, field will ignore if it is null
     *
     * @param vulnerabilityID the id of the vulnerability to save.
     * @param vulnerability the vulnerability to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated vulnerability,
     * or with status {@code 400 (Bad Request)} if the vulnerability is not valid,
     * or with status {@code 404 (Not Found)} if the vulnerability is not found,
     * or with status {@code 500 (Internal Server Error)} if the vulnerability couldn't be updated.
     * @throws URISyntaxException if the Location URI syntax is incorrect.
     */
    @PatchMapping(value = "/vulnerabilities/{vulnerabilityID}", consumes = { "application/json", "application/merge-patch+json" })
    public ResponseEntity<Vulnerability> partialUpdateVulnerability(
        @PathVariable(value = "vulnerabilityID", required = false) final UUID vulnerabilityID,
        @NotNull @RequestBody Vulnerability vulnerability
    ) throws URISyntaxException {
        log.debug("REST request to partial update Vulnerability partially : {}, {}", vulnerabilityID, vulnerability);
        if (vulnerability.getVulnerabilityID() == null) {
            throw new BadRequestAlertException("Invalid id", ENTITY_NAME, "idnull");
        }
        if (!Objects.equals(vulnerabilityID, vulnerability.getVulnerabilityID())) {
            throw new BadRequestAlertException("Invalid ID", ENTITY_NAME, "idinvalid");
        }

        if (!vulnerabilityRepository.existsById(vulnerabilityID)) {
            throw new BadRequestAlertException("Entity not found", ENTITY_NAME, "idnotfound");
        }

        Optional<Vulnerability> result = vulnerabilityRepository
            .findById(vulnerability.getVulnerabilityID())
            .map(existingVulnerability -> {
                if (vulnerability.getName() != null) {
                    existingVulnerability.setName(vulnerability.getName());
                }
                if (vulnerability.getCweReference() != null) {
                    existingVulnerability.setCweReference(vulnerability.getCweReference());
                }
                if (vulnerability.getCvss() != null) {
                    existingVulnerability.setCvss(vulnerability.getCvss());
                }

                return existingVulnerability;
            })
            .map(vulnerabilityRepository::save)
            .map(savedVulnerability -> {
                vulnerabilitySearchRepository.save(savedVulnerability);

                return savedVulnerability;
            });

        return ResponseUtil.wrapOrNotFound(
            result,
            HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, vulnerability.getVulnerabilityID().toString())
        );
    }

    /**
     * {@code GET  /vulnerabilities} : get all the vulnerabilities.
     *
     * @param eagerload flag to eager load entities from relationships (This is applicable for many-to-many).
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of vulnerabilities in body.
     */
    @GetMapping("/vulnerabilities")
    public List<Vulnerability> getAllVulnerabilities(@RequestParam(required = false, defaultValue = "false") boolean eagerload) {
        log.debug("REST request to get all Vulnerabilities");
        return vulnerabilityRepository.findAllWithEagerRelationships();
    }

    /**
     * {@code GET  /vulnerabilities/:id} : get the "id" vulnerability.
     *
     * @param id the id of the vulnerability to retrieve.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the vulnerability, or with status {@code 404 (Not Found)}.
     */
    @GetMapping("/vulnerabilities/{id}")
    public ResponseEntity<Vulnerability> getVulnerability(@PathVariable UUID id) {
        log.debug("REST request to get Vulnerability : {}", id);
        Optional<Vulnerability> vulnerability = vulnerabilityRepository.findOneWithEagerRelationships(id);
        return ResponseUtil.wrapOrNotFound(vulnerability);
    }

    /**
     * {@code DELETE  /vulnerabilities/:id} : delete the "id" vulnerability.
     *
     * @param id the id of the vulnerability to delete.
     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.
     */
    @DeleteMapping("/vulnerabilities/{id}")
    public ResponseEntity<Void> deleteVulnerability(@PathVariable UUID id) {
        log.debug("REST request to delete Vulnerability : {}", id);
        vulnerabilityRepository.deleteById(id);
        vulnerabilitySearchRepository.deleteById(id);
        return ResponseEntity
            .noContent()
            .headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, id.toString()))
            .build();
    }

    /**
     * {@code SEARCH  /_search/vulnerabilities?query=:query} : search for the vulnerability corresponding
     * to the query.
     *
     * @param query the query of the vulnerability search.
     * @return the result of the search.
     */
    @GetMapping("/_search/vulnerabilities")
    public List<Vulnerability> searchVulnerabilities(@RequestParam String query) {
        log.debug("REST request to search Vulnerabilities for query {}", query);
        return StreamSupport.stream(vulnerabilitySearchRepository.search(query).spliterator(), false).collect(Collectors.toList());
    }
}
