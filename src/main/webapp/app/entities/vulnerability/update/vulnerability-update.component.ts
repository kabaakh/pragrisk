import { Component, OnInit } from '@angular/core';
import { HttpResponse } from '@angular/common/http';
import { FormBuilder, Validators } from '@angular/forms';
import { ActivatedRoute } from '@angular/router';
import { Observable } from 'rxjs';
import { finalize, map } from 'rxjs/operators';

import { IVulnerability, Vulnerability } from '../vulnerability.model';
import { VulnerabilityService } from '../service/vulnerability.service';
import { IMitigation } from 'app/entities/mitigation/mitigation.model';
import { MitigationService } from 'app/entities/mitigation/service/mitigation.service';

@Component({
  selector: 'jhi-vulnerability-update',
  templateUrl: './vulnerability-update.component.html',
})
export class VulnerabilityUpdateComponent implements OnInit {
  isSaving = false;

  mitigationsSharedCollection: IMitigation[] = [];

  editForm = this.fb.group({
    vulnerabilityID: [null, [Validators.required]],
    name: [null, [Validators.required]],
    cweReference: [],
    mitigations: [],
  });

  constructor(
    protected vulnerabilityService: VulnerabilityService,
    protected mitigationService: MitigationService,
    protected activatedRoute: ActivatedRoute,
    protected fb: FormBuilder
  ) {}

  ngOnInit(): void {
    this.activatedRoute.data.subscribe(({ vulnerability }) => {
      this.updateForm(vulnerability);

      this.loadRelationshipsOptions();
    });
  }

  previousState(): void {
    window.history.back();
  }

  save(): void {
    this.isSaving = true;
    const vulnerability = this.createFromForm();
    if (vulnerability.vulnerabilityID !== undefined) {
      this.subscribeToSaveResponse(this.vulnerabilityService.update(vulnerability));
    } else {
      this.subscribeToSaveResponse(this.vulnerabilityService.create(vulnerability));
    }
  }

  trackMitigationByVulnerabiltyID(index: number, item: IMitigation): string {
    return item.vulnerabiltyID!;
  }

  getSelectedMitigation(option: IMitigation, selectedVals?: IMitigation[]): IMitigation {
    if (selectedVals) {
      for (const selectedVal of selectedVals) {
        if (option.vulnerabiltyID === selectedVal.vulnerabiltyID) {
          return selectedVal;
        }
      }
    }
    return option;
  }

  protected subscribeToSaveResponse(result: Observable<HttpResponse<IVulnerability>>): void {
    result.pipe(finalize(() => this.onSaveFinalize())).subscribe({
      next: () => this.onSaveSuccess(),
      error: () => this.onSaveError(),
    });
  }

  protected onSaveSuccess(): void {
    this.previousState();
  }

  protected onSaveError(): void {
    // Api for inheritance.
  }

  protected onSaveFinalize(): void {
    this.isSaving = false;
  }

  protected updateForm(vulnerability: IVulnerability): void {
    this.editForm.patchValue({
      vulnerabilityID: vulnerability.vulnerabilityID,
      name: vulnerability.name,
      cweReference: vulnerability.cweReference,
      mitigations: vulnerability.mitigations,
    });

    this.mitigationsSharedCollection = this.mitigationService.addMitigationToCollectionIfMissing(
      this.mitigationsSharedCollection,
      ...(vulnerability.mitigations ?? [])
    );
  }

  protected loadRelationshipsOptions(): void {
    this.mitigationService
      .query()
      .pipe(map((res: HttpResponse<IMitigation[]>) => res.body ?? []))
      .pipe(
        map((mitigations: IMitigation[]) =>
          this.mitigationService.addMitigationToCollectionIfMissing(mitigations, ...(this.editForm.get('mitigations')!.value ?? []))
        )
      )
      .subscribe((mitigations: IMitigation[]) => (this.mitigationsSharedCollection = mitigations));
  }

  protected createFromForm(): IVulnerability {
    return {
      ...new Vulnerability(),
      vulnerabilityID: this.editForm.get(['vulnerabilityID'])!.value,
      name: this.editForm.get(['name'])!.value,
      cweReference: this.editForm.get(['cweReference'])!.value,
      mitigations: this.editForm.get(['mitigations'])!.value,
    };
  }
}
