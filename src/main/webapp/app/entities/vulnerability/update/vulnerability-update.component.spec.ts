import { ComponentFixture, TestBed } from '@angular/core/testing';
import { HttpResponse } from '@angular/common/http';
import { HttpClientTestingModule } from '@angular/common/http/testing';
import { FormBuilder } from '@angular/forms';
import { ActivatedRoute } from '@angular/router';
import { RouterTestingModule } from '@angular/router/testing';
import { of, Subject, from } from 'rxjs';

import { VulnerabilityService } from '../service/vulnerability.service';
import { IVulnerability, Vulnerability } from '../vulnerability.model';
import { IMitigation } from 'app/entities/mitigation/mitigation.model';
import { MitigationService } from 'app/entities/mitigation/service/mitigation.service';

import { VulnerabilityUpdateComponent } from './vulnerability-update.component';

describe('Vulnerability Management Update Component', () => {
  let comp: VulnerabilityUpdateComponent;
  let fixture: ComponentFixture<VulnerabilityUpdateComponent>;
  let activatedRoute: ActivatedRoute;
  let vulnerabilityService: VulnerabilityService;
  let mitigationService: MitigationService;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [HttpClientTestingModule, RouterTestingModule.withRoutes([])],
      declarations: [VulnerabilityUpdateComponent],
      providers: [
        FormBuilder,
        {
          provide: ActivatedRoute,
          useValue: {
            params: from([{}]),
          },
        },
      ],
    })
      .overrideTemplate(VulnerabilityUpdateComponent, '')
      .compileComponents();

    fixture = TestBed.createComponent(VulnerabilityUpdateComponent);
    activatedRoute = TestBed.inject(ActivatedRoute);
    vulnerabilityService = TestBed.inject(VulnerabilityService);
    mitigationService = TestBed.inject(MitigationService);

    comp = fixture.componentInstance;
  });

  describe('ngOnInit', () => {
    it('Should call Mitigation query and add missing value', () => {
      const vulnerability: IVulnerability = { vulnerabilityID: '1361f429-3817-4123-8ee3-fdf8943310b2' };
      const mitigations: IMitigation[] = [{ vulnerabiltyID: 'b8007ba9-ba8f-462b-8e0c-9aac9266d8d9' }];
      vulnerability.mitigations = mitigations;

      const mitigationCollection: IMitigation[] = [{ vulnerabiltyID: '62edefe3-b23b-4b3d-af97-1afa75db7bb6' }];
      jest.spyOn(mitigationService, 'query').mockReturnValue(of(new HttpResponse({ body: mitigationCollection })));
      const additionalMitigations = [...mitigations];
      const expectedCollection: IMitigation[] = [...additionalMitigations, ...mitigationCollection];
      jest.spyOn(mitigationService, 'addMitigationToCollectionIfMissing').mockReturnValue(expectedCollection);

      activatedRoute.data = of({ vulnerability });
      comp.ngOnInit();

      expect(mitigationService.query).toHaveBeenCalled();
      expect(mitigationService.addMitigationToCollectionIfMissing).toHaveBeenCalledWith(mitigationCollection, ...additionalMitigations);
      expect(comp.mitigationsSharedCollection).toEqual(expectedCollection);
    });

    it('Should update editForm', () => {
      const vulnerability: IVulnerability = { vulnerabilityID: '1361f429-3817-4123-8ee3-fdf8943310b2' };
      const mitigations: IMitigation = { vulnerabiltyID: '79fe79cb-4a7f-416e-816a-68bbf73726ac' };
      vulnerability.mitigations = [mitigations];

      activatedRoute.data = of({ vulnerability });
      comp.ngOnInit();

      expect(comp.editForm.value).toEqual(expect.objectContaining(vulnerability));
      expect(comp.mitigationsSharedCollection).toContain(mitigations);
    });
  });

  describe('save', () => {
    it('Should call update service on save for existing entity', () => {
      // GIVEN
      const saveSubject = new Subject<HttpResponse<Vulnerability>>();
      const vulnerability = { vulnerabilityID: '9fec3727-3421-4967-b213-ba36557ca194' };
      jest.spyOn(vulnerabilityService, 'update').mockReturnValue(saveSubject);
      jest.spyOn(comp, 'previousState');
      activatedRoute.data = of({ vulnerability });
      comp.ngOnInit();

      // WHEN
      comp.save();
      expect(comp.isSaving).toEqual(true);
      saveSubject.next(new HttpResponse({ body: vulnerability }));
      saveSubject.complete();

      // THEN
      expect(comp.previousState).toHaveBeenCalled();
      expect(vulnerabilityService.update).toHaveBeenCalledWith(vulnerability);
      expect(comp.isSaving).toEqual(false);
    });

    it('Should call create service on save for new entity', () => {
      // GIVEN
      const saveSubject = new Subject<HttpResponse<Vulnerability>>();
      const vulnerability = new Vulnerability();
      jest.spyOn(vulnerabilityService, 'create').mockReturnValue(saveSubject);
      jest.spyOn(comp, 'previousState');
      activatedRoute.data = of({ vulnerability });
      comp.ngOnInit();

      // WHEN
      comp.save();
      expect(comp.isSaving).toEqual(true);
      saveSubject.next(new HttpResponse({ body: vulnerability }));
      saveSubject.complete();

      // THEN
      expect(vulnerabilityService.create).toHaveBeenCalledWith(vulnerability);
      expect(comp.isSaving).toEqual(false);
      expect(comp.previousState).toHaveBeenCalled();
    });

    it('Should set isSaving to false on error', () => {
      // GIVEN
      const saveSubject = new Subject<HttpResponse<Vulnerability>>();
      const vulnerability = { vulnerabilityID: '9fec3727-3421-4967-b213-ba36557ca194' };
      jest.spyOn(vulnerabilityService, 'update').mockReturnValue(saveSubject);
      jest.spyOn(comp, 'previousState');
      activatedRoute.data = of({ vulnerability });
      comp.ngOnInit();

      // WHEN
      comp.save();
      expect(comp.isSaving).toEqual(true);
      saveSubject.error('This is an error!');

      // THEN
      expect(vulnerabilityService.update).toHaveBeenCalledWith(vulnerability);
      expect(comp.isSaving).toEqual(false);
      expect(comp.previousState).not.toHaveBeenCalled();
    });
  });

  describe('Tracking relationships identifiers', () => {
    describe('trackMitigationByVulnerabiltyID', () => {
      it('Should return tracked Mitigation primary key', () => {
        const entity = { vulnerabiltyID: '9fec3727-3421-4967-b213-ba36557ca194' };
        const trackResult = comp.trackMitigationByVulnerabiltyID(0, entity);
        expect(trackResult).toEqual(entity.vulnerabiltyID);
      });
    });
  });

  describe('Getting selected relationships', () => {
    describe('getSelectedMitigation', () => {
      it('Should return option if no Mitigation is selected', () => {
        const option = { vulnerabiltyID: '9fec3727-3421-4967-b213-ba36557ca194' };
        const result = comp.getSelectedMitigation(option);
        expect(result === option).toEqual(true);
      });

      it('Should return selected Mitigation for according option', () => {
        const option = { vulnerabiltyID: '9fec3727-3421-4967-b213-ba36557ca194' };
        const selected = { vulnerabiltyID: '9fec3727-3421-4967-b213-ba36557ca194' };
        const selected2 = { vulnerabiltyID: '1361f429-3817-4123-8ee3-fdf8943310b2' };
        const result = comp.getSelectedMitigation(option, [selected2, selected]);
        expect(result === selected).toEqual(true);
        expect(result === selected2).toEqual(false);
        expect(result === option).toEqual(false);
      });

      it('Should return option if this Mitigation is not selected', () => {
        const option = { vulnerabiltyID: '9fec3727-3421-4967-b213-ba36557ca194' };
        const selected = { vulnerabiltyID: '1361f429-3817-4123-8ee3-fdf8943310b2' };
        const result = comp.getSelectedMitigation(option, [selected]);
        expect(result === option).toEqual(true);
        expect(result === selected).toEqual(false);
      });
    });
  });
});
