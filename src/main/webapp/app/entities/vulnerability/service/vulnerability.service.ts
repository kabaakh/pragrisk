import { Injectable } from '@angular/core';
import { HttpClient, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';

import { isPresent } from 'app/core/util/operators';
import { ApplicationConfigService } from 'app/core/config/application-config.service';
import { createRequestOption } from 'app/core/request/request-util';
import { Search } from 'app/core/request/request.model';
import { IVulnerability, getVulnerabilityIdentifier } from '../vulnerability.model';

export type EntityResponseType = HttpResponse<IVulnerability>;
export type EntityArrayResponseType = HttpResponse<IVulnerability[]>;

@Injectable({ providedIn: 'root' })
export class VulnerabilityService {
  protected resourceUrl = this.applicationConfigService.getEndpointFor('api/vulnerabilities');
  protected resourceSearchUrl = this.applicationConfigService.getEndpointFor('api/_search/vulnerabilities');

  constructor(protected http: HttpClient, protected applicationConfigService: ApplicationConfigService) {}

  create(vulnerability: IVulnerability): Observable<EntityResponseType> {
    return this.http.post<IVulnerability>(this.resourceUrl, vulnerability, { observe: 'response' });
  }

  update(vulnerability: IVulnerability): Observable<EntityResponseType> {
    return this.http.put<IVulnerability>(`${this.resourceUrl}/${getVulnerabilityIdentifier(vulnerability) as string}`, vulnerability, {
      observe: 'response',
    });
  }

  partialUpdate(vulnerability: IVulnerability): Observable<EntityResponseType> {
    return this.http.patch<IVulnerability>(`${this.resourceUrl}/${getVulnerabilityIdentifier(vulnerability) as string}`, vulnerability, {
      observe: 'response',
    });
  }

  find(id: string): Observable<EntityResponseType> {
    return this.http.get<IVulnerability>(`${this.resourceUrl}/${id}`, { observe: 'response' });
  }

  query(req?: any): Observable<EntityArrayResponseType> {
    const options = createRequestOption(req);
    return this.http.get<IVulnerability[]>(this.resourceUrl, { params: options, observe: 'response' });
  }

  delete(id: string): Observable<HttpResponse<{}>> {
    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });
  }

  search(req: Search): Observable<EntityArrayResponseType> {
    const options = createRequestOption(req);
    return this.http.get<IVulnerability[]>(this.resourceSearchUrl, { params: options, observe: 'response' });
  }

  addVulnerabilityToCollectionIfMissing(
    vulnerabilityCollection: IVulnerability[],
    ...vulnerabilitiesToCheck: (IVulnerability | null | undefined)[]
  ): IVulnerability[] {
    const vulnerabilities: IVulnerability[] = vulnerabilitiesToCheck.filter(isPresent);
    if (vulnerabilities.length > 0) {
      const vulnerabilityCollectionIdentifiers = vulnerabilityCollection.map(
        vulnerabilityItem => getVulnerabilityIdentifier(vulnerabilityItem)!
      );
      const vulnerabilitiesToAdd = vulnerabilities.filter(vulnerabilityItem => {
        const vulnerabilityIdentifier = getVulnerabilityIdentifier(vulnerabilityItem);
        if (vulnerabilityIdentifier == null || vulnerabilityCollectionIdentifiers.includes(vulnerabilityIdentifier)) {
          return false;
        }
        vulnerabilityCollectionIdentifiers.push(vulnerabilityIdentifier);
        return true;
      });
      return [...vulnerabilitiesToAdd, ...vulnerabilityCollection];
    }
    return vulnerabilityCollection;
  }
}
