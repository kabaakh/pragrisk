import { TestBed } from '@angular/core/testing';
import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';

import { IVulnerability, Vulnerability } from '../vulnerability.model';

import { VulnerabilityService } from './vulnerability.service';

describe('Vulnerability Service', () => {
  let service: VulnerabilityService;
  let httpMock: HttpTestingController;
  let elemDefault: IVulnerability;
  let expectedResult: IVulnerability | IVulnerability[] | boolean | null;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [HttpClientTestingModule],
    });
    expectedResult = null;
    service = TestBed.inject(VulnerabilityService);
    httpMock = TestBed.inject(HttpTestingController);

    elemDefault = {
      vulnerabilityID: 'AAAAAAA',
      name: 'AAAAAAA',
      cweReference: 'AAAAAAA',
    };
  });

  describe('Service methods', () => {
    it('should find an element', () => {
      const returnedFromService = Object.assign({}, elemDefault);

      service.find('9fec3727-3421-4967-b213-ba36557ca194').subscribe(resp => (expectedResult = resp.body));

      const req = httpMock.expectOne({ method: 'GET' });
      req.flush(returnedFromService);
      expect(expectedResult).toMatchObject(elemDefault);
    });

    it('should create a Vulnerability', () => {
      const returnedFromService = Object.assign(
        {
          id: 'ID',
        },
        elemDefault
      );

      const expected = Object.assign({}, returnedFromService);

      service.create(new Vulnerability()).subscribe(resp => (expectedResult = resp.body));

      const req = httpMock.expectOne({ method: 'POST' });
      req.flush(returnedFromService);
      expect(expectedResult).toMatchObject(expected);
    });

    it('should update a Vulnerability', () => {
      const returnedFromService = Object.assign(
        {
          vulnerabilityID: 'BBBBBB',
          name: 'BBBBBB',
          cweReference: 'BBBBBB',
        },
        elemDefault
      );

      const expected = Object.assign({}, returnedFromService);

      service.update(expected).subscribe(resp => (expectedResult = resp.body));

      const req = httpMock.expectOne({ method: 'PUT' });
      req.flush(returnedFromService);
      expect(expectedResult).toMatchObject(expected);
    });

    it('should partial update a Vulnerability', () => {
      const patchObject = Object.assign(
        {
          cweReference: 'BBBBBB',
        },
        new Vulnerability()
      );

      const returnedFromService = Object.assign(patchObject, elemDefault);

      const expected = Object.assign({}, returnedFromService);

      service.partialUpdate(patchObject).subscribe(resp => (expectedResult = resp.body));

      const req = httpMock.expectOne({ method: 'PATCH' });
      req.flush(returnedFromService);
      expect(expectedResult).toMatchObject(expected);
    });

    it('should return a list of Vulnerability', () => {
      const returnedFromService = Object.assign(
        {
          vulnerabilityID: 'BBBBBB',
          name: 'BBBBBB',
          cweReference: 'BBBBBB',
        },
        elemDefault
      );

      const expected = Object.assign({}, returnedFromService);

      service.query().subscribe(resp => (expectedResult = resp.body));

      const req = httpMock.expectOne({ method: 'GET' });
      req.flush([returnedFromService]);
      httpMock.verify();
      expect(expectedResult).toContainEqual(expected);
    });

    it('should delete a Vulnerability', () => {
      service.delete('9fec3727-3421-4967-b213-ba36557ca194').subscribe(resp => (expectedResult = resp.ok));

      const req = httpMock.expectOne({ method: 'DELETE' });
      req.flush({ status: 200 });
      expect(expectedResult);
    });

    describe('addVulnerabilityToCollectionIfMissing', () => {
      it('should add a Vulnerability to an empty array', () => {
        const vulnerability: IVulnerability = { vulnerabilityID: '9fec3727-3421-4967-b213-ba36557ca194' };
        expectedResult = service.addVulnerabilityToCollectionIfMissing([], vulnerability);
        expect(expectedResult).toHaveLength(1);
        expect(expectedResult).toContain(vulnerability);
      });

      it('should not add a Vulnerability to an array that contains it', () => {
        const vulnerability: IVulnerability = { vulnerabilityID: '9fec3727-3421-4967-b213-ba36557ca194' };
        const vulnerabilityCollection: IVulnerability[] = [
          {
            ...vulnerability,
          },
          { vulnerabilityID: '1361f429-3817-4123-8ee3-fdf8943310b2' },
        ];
        expectedResult = service.addVulnerabilityToCollectionIfMissing(vulnerabilityCollection, vulnerability);
        expect(expectedResult).toHaveLength(2);
      });

      it("should add a Vulnerability to an array that doesn't contain it", () => {
        const vulnerability: IVulnerability = { vulnerabilityID: '9fec3727-3421-4967-b213-ba36557ca194' };
        const vulnerabilityCollection: IVulnerability[] = [{ vulnerabilityID: '1361f429-3817-4123-8ee3-fdf8943310b2' }];
        expectedResult = service.addVulnerabilityToCollectionIfMissing(vulnerabilityCollection, vulnerability);
        expect(expectedResult).toHaveLength(2);
        expect(expectedResult).toContain(vulnerability);
      });

      it('should add only unique Vulnerability to an array', () => {
        const vulnerabilityArray: IVulnerability[] = [
          { vulnerabilityID: '9fec3727-3421-4967-b213-ba36557ca194' },
          { vulnerabilityID: '1361f429-3817-4123-8ee3-fdf8943310b2' },
          { vulnerabilityID: 'd8b624a7-aaec-4984-8605-8e303563b11f' },
        ];
        const vulnerabilityCollection: IVulnerability[] = [{ vulnerabilityID: '9fec3727-3421-4967-b213-ba36557ca194' }];
        expectedResult = service.addVulnerabilityToCollectionIfMissing(vulnerabilityCollection, ...vulnerabilityArray);
        expect(expectedResult).toHaveLength(3);
      });

      it('should accept varargs', () => {
        const vulnerability: IVulnerability = { vulnerabilityID: '9fec3727-3421-4967-b213-ba36557ca194' };
        const vulnerability2: IVulnerability = { vulnerabilityID: '1361f429-3817-4123-8ee3-fdf8943310b2' };
        expectedResult = service.addVulnerabilityToCollectionIfMissing([], vulnerability, vulnerability2);
        expect(expectedResult).toHaveLength(2);
        expect(expectedResult).toContain(vulnerability);
        expect(expectedResult).toContain(vulnerability2);
      });

      it('should accept null and undefined values', () => {
        const vulnerability: IVulnerability = { vulnerabilityID: '9fec3727-3421-4967-b213-ba36557ca194' };
        expectedResult = service.addVulnerabilityToCollectionIfMissing([], null, vulnerability, undefined);
        expect(expectedResult).toHaveLength(1);
        expect(expectedResult).toContain(vulnerability);
      });

      it('should return initial array if no Vulnerability is added', () => {
        const vulnerabilityCollection: IVulnerability[] = [{ vulnerabilityID: '9fec3727-3421-4967-b213-ba36557ca194' }];
        expectedResult = service.addVulnerabilityToCollectionIfMissing(vulnerabilityCollection, undefined, null);
        expect(expectedResult).toEqual(vulnerabilityCollection);
      });
    });
  });

  afterEach(() => {
    httpMock.verify();
  });
});
